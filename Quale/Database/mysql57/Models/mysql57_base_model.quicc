
<#:model()



/******************** DOMAINS *********************/

 
/****************** GENERATORS ********************/

CREATE GENERATOR Z$PK_GEN;
SET GENERATOR Z$PK_GEN TO 1000000100;


CREATE GENERATOR Z$SERVER_NUMBER;
SET GENERATOR Z$SERVER_NUMBER TO 12;


CREATE GENERATOR Z$CONTEXT_SEQ;
SET GENERATOR Z$CONTEXT_SEQ TO 10000;

CREATE GENERATOR Z$SP_INDEX;
SET GENERATOR Z$SP_INDEX TO 1;


CREATE TABLE Z$GEN_PK_SEQ
(
  PK INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY ,
  X INTEGER
);

CREATE TABLE Z$CONTEXT_SEQ(
 id INT AUTO_INCREMENT PRIMARY KEY,
 x int
); 

/*
SET TERM ^ ;
CREATE FUNCTION Z$GEN_CONTEXT_SEQ () 
RETURNS decimal
BEGIN 
  DECLARE dist int;
  
  INSERT INTO Z$CONTEXT_SEQ (x) VALUES (0);
   SET dist = (SELECT LAST_INSERT_ID());
  
   RETURN dist;
END^
SET TERM ; ^
*/

/******************** TRIGGERS ********************/

/*
SET TERM ^ ;
CREATE TRIGGER `Z$SP_before_insert`
BEFORE INSERT ON Z$SP FOR EACH ROW 
BEGIN
END;;
SET TERM ; ^
*/


/******************* PROCEDURES ******************/



SET TERM ^ ;
CREATE PROCEDURE Z$CLEAR_CONTEXTS (IN MODE Integer)
BEGIN
    delete from Z$PK_CACHE;
    delete from Z$VARIABLES;
    delete from Z$CONTEXT;
    delete from TODO_MVC;
END^
SET TERM ; ^



SET TERM ^ ;
CREATE PROCEDURE Z$VARIABLES_UPSERT (IN REF varchar(80),IN VALU varchar(256) ) 
BEGIN
    INSERT INTO Z$VARIABLES (VALU, REF,EXPIRE) 
	VALUES (VALU,REF,DATE_ADD(now() , INTERVAL 1 HOUR))
	ON DUPLICATE KEY UPDATE VALU=VALU;

END; ^
SET TERM ; ^


SET TERM ^ ;
CREATE  PROCEDURE Z$EXECUTE_STRINGS(
IN split_string VARCHAR(8000)
)
BEGIN
	DECLARE my_delimiter CHAR(1);
	DECLARE ins_query varchar(8000);
	DECLARE p INT;

	SET my_delimiter='\r';
	set p=1;
	while p<10000 do
	  set p= POSITION(my_delimiter IN split_string); 
	  if (p<=0) THEN set p=10000;  END IF;
	  set ins_query = SUBSTRING(split_string ,1, p);
	  set split_string = SUBSTRING(split_string ,p+1,10000);
	  
	  set @ins_query=ins_query;
	  PREPARE ins_query from @ins_query;
	  EXECUTE ins_query;
			
	END while;
END  ^
SET TERM ; ^



/*Mysql RUN_SUB

test code:
new function returns currentpage==null for save only

SELECT info,currentpage,page_params FROM Z$RUN_SUB ('SESSION1', 999,999,  'u05Guestp11AnyPasswordx00end') p;

SELECT info,currentpage,page_params FROM Z$RUN_SUB ('SESSION1', 999,999,  'u05Guestp041258x00end') p;

SELECT info,currentpage,page_params FROM Z$RUN_SUB ('SESSION1', 999,-1,  'x00end') p;


call Z$RUN_SUB ('SESSION1', 999,999,  'u05Guestp11AnyPasswordx00end',v1,v2,v3,v4,v5);

call Z$RUN_SUB ('SESSION1', 0,0,  'u05Guestp11AnyPasswordx00end',@v1,@v2,@v3,@v4,@v5);

*/

SET TERM ^ ;

CREATE PROCEDURE Z$RUN_SUB(
    IN SESSION Varchar(40),
    IN PRIOR_CONTEXT_ID Integer,
    IN PRIOR_ITEM_ID Integer,
    IN UPDATES TEXT ,

    OUT INFO Varchar(1000),
    OUT CURRENTPAGE Varchar(100),
    OUT page_params Varchar(1000),
    OUT NEW_CONTEXT_ID Integer)


proc_label: BEGIN
	DECLARE  o_ref    varchar(40);
	DECLARE  o_session varchar(40);
	DECLARE  passw    varchar(20) DEFAULT '';
	DECLARE  usern    varchar(20) DEFAULT '';
	DECLARE  LANDING_PAGE_R varchar(100) ;
	DECLARE  table_name varchar(100);
	DECLARE  target_field_name  varchar(100);
	DECLARE  target_fields     varchar(100);
	DECLARE  pk_field_name_local  varchar(100);
	DECLARE  pk_val  varchar(100);    
	DECLARE  current_page_pk  integer;
	DECLARE  i        integer;
	DECLARE  update_cid integer;
	DECLARE  bp        integer;
	DECLARE  val       varchar(8001);
	DECLARE  c         integer;
	DECLARE  len       integer;
	DECLARE  bt        char(1);
	DECLARE  pk        integer;
	DECLARE  script    TEXT; 
	DECLARE  Openstr   varchar(1000);
	DECLARE  updatelist   TEXT; 
	DECLARE  fieldvalue varchar(1000);
	DECLARE  fieldname  varchar(1000);

	set currentpage='';
	set page_params='';

	/*post updates - and check for username passwds*/   
	set bp=1;    
    set c=0;
    while (c<1000) do 
     
        set c=c+1;
        set bt=SUBSTRING(UPDATES,bp,1);             
        if (bt>='a') THEN /*lower case are short fields*/
				  set len=CONVERT(SUBSTRING(UPDATES,bp+1,2),SIGNED INTEGER) ;
                  set val=SUBSTRING(UPDATES,bp+3,len);        
                  set bp=bp+3+len;              
        ELSE
                  set len=CONVERT(SUBSTRING(UPDATES,bp+1,5),SIGNED INTEGER);      
                  set val=SUBSTRING(UPDATES,bp+6,len);        
                  set bp=bp+6+len;              
        END IF;
          
		set bt=LOWER(bt);
		CASE bt
			WHEN 'u' THEN set usern=val ;       
			WHEN 'p' THEN set passw=val ;  
			WHEN 'l' THEN set currentpage=val ;
			WHEN 't' THEN set Openstr=val ;	 -- used as temporary storage 		
			WHEN 'c' THEN set update_cid=val ;  -- used as temporary storage                 
			WHEN 'k' THEN set i=CONVERT(val,SIGNED INTEGER); /*Key field update - used as temporary storage                 */
			WHEN 'r' THEN /*parameter value from first load Openstr=name*/
					-- UPDATE OR INSERT INTO Z$VARIABLES (REF,VALU) VALUES ('params-'||:SESSION||'-'||:Openstr,:val) matching (REF); 					 			
					INSERT INTO Z$VARIABLES (REF,VALU) VALUES (concat('params-',SESSION,'-',Openstr),val)
						ON DUPLICATE KEY UPDATE REF=concat('params-',SESSION,'-',Openstr),VALU=val;
  
			WHEN 'v' THEN /*Key value update - temp cache*/
				 
					-- softcodec code from the compiler	
					SELECT COALESCE(b.page_params,'') INTO script FROM Z$PK_CACHE b 
						WHERE b.MASTER = update_cid AND b.INDX = i limit 1;
					/*TODO my sql soft codec function*/	
--					if (script<>'') THEN
--						EXECUTE STATEMENT(script)(:val) INTO :val; 
					
					-- val=clean_escape(val);-- not needed we are using paramitzed stament
					update Z$PK_CACHE a set a.new_value=val , a.NEW_VALUE_SET=1
						WHERE a.MASTER = update_cid AND a.INDX = i;						
				                    
			WHEN 'w'  THEN /*Key value update - write updates per record*/
					BEGIN
					DECLARE cache_done INT DEFAULT FALSE;
				    DECLARE cache_cursor cursor for select VALU, QUERY, PK_FIELD_NAME from Z$PK_CACHE b
						WHERE b.MASTER = update_cid and b.NEW_VALUE_SET=1
						GROUP by b.MASTER,b.NEW_VALUE_SET,b.VALU,b.QUERY,b.PK_FIELD_NAME;
					DECLARE CONTINUE HANDLER FOR NOT FOUND SET cache_done = TRUE;	
						
					OPEN cache_cursor;
					update_loop: LOOP					
						FETCH cache_cursor INTO table_name,pk_val,pk_field_name_local;					
						IF cache_done THEN 
							LEAVE update_loop;
						END IF; 
						
						set val = pk_field_name_local;
						set script = '?';
						set updatelist='';
						BEGIN
							DECLARE fields_done INT DEFAULT FALSE;
							DECLARE fields_cursor cursor 
							for SELECT c.TARGET,c.INDX,c.TARGET_FIELDS,c.TARGET_VALUES FROM Z$PK_CACHE c
								WHERE c.MASTER = update_cid 
								and c.NEW_VALUE_SET=1
								and c.VALU=table_name and c.QUERY=pk_val and c.PK_FIELD_NAME=pk_field_name_local;
							DECLARE CONTINUE HANDLER FOR NOT FOUND SET fields_done = TRUE;	
								
							set fields_done = FALSE;	
							-- todo target fields and openstr can be redone as just a second record
							OPEN fields_cursor;
							fields_loop: LOOP					
								FETCH fields_cursor INTO target_field_name,i,target_fields,Openstr;					
								IF fields_done THEN 
									LEAVE fields_loop;
								END IF; 

								-- select 'FETCH ',table_name,pk_val,pk_field_name_local,' ---- ', target_field_name,i,target_fields,Openstr;

								
								set fieldname  = concat(target_field_name,COALESCE(target_fields,'') );
								set fieldvalue = concat('(select a.new_value from Z$PK_CACHE a where a.MASTER =',update_cid,' AND a.INDX = ',i,')');								
								-- select 'val ',val,fieldname,target_field_name,target_fields;
								set val = concat(val,',',fieldname );	
								-- select 'script ',script,fieldvalue,Openstr,fieldname,'=',fieldvalue;
								set script = concat(script , ',', fieldvalue ,COALESCE(Openstr,''));                             
								set updatelist = concat(updatelist,', ',target_field_name,'=',fieldvalue );
								-- select 'valz ',updatelist;
								
								
							END LOOP fields_loop;					 
							CLOSE fields_cursor;										


							-- fixup pk for insert methods
							if ((pk_val is null ) or (OCTET_LENGTH(pk_val)<=1)) THEN
								    INSERT INTO Z$GEN_PK_SEQ (x) VALUES (0);
									SET @pk_val_exec = (SELECT LAST_INSERT_ID());
									set @stmti_exec = concat('insert into ',table_name,' (',val,') values (',script,')' );
									-- select 'ins ',@pk_val_exec,@stmti_exec;

								ELSE
								
									set updatelist = SUBSTRING(concat(updatelist,' ',target_fields,'=',SUBSTRING(Openstr,2) ),2);
									-- select 'valz ',updatelist;
									set @pk_val_exec=pk_val;
									set @stmti_exec = concat('update ',table_name,' set ',updatelist,' where ',pk_field_name_local,'=?;' );
								 	-- select 'upd ',@pk_val_exec,@stmti_exec;

								
								END IF;
							 PREPARE stmti FROM @stmti_exec;  									
							 EXECUTE stmti USING @pk_val_exec;       
							 DEALLOCATE PREPARE stmti;  

							update Z$PK_CACHE a set new_value=null,a.NEW_VALUE_SET=null WHERE a.MASTER = update_cid;
							-- Todo trigger based validations will emit erors into a log that can be fed back to the user

						
						END;	

					END LOOP update_loop;					 
					CLOSE cache_cursor;
 					END;

		ELSE set c=1001;
		END CASE;
                  
      END WHILE;
	  
	  
	  
	 -- select  usern, passw,PRIOR_ITEM_ID;
    /*part of post updates is creating a new session if login info is supplied*/
    if (usern='') THEN    
			if (PRIOR_ITEM_ID=-1) then -- save without refreshing
				  set info='saved';
				  LEAVE proc_label;
				end if;
				
			/*get the old page, and context info, to refresh page */
			SELECT r.OPERATOR_REF, r.PAGE into o_ref,val FROM Z$CONTEXT r where r.pk=PRIOR_CONTEXT_ID and r.SESSION_REF=SESSION limit 1 ;                        
			if (currentpage='') then set currentpage = val; end if;	 
			
			if (PRIOR_ITEM_ID<>0) then -- load in updated page and page parameters
					SELECT a.target,concat(COALESCE(a.PAGE_PARAMS,''),page_params) into val,page_params FROM Z$PK_CACHE a 
					WHERE a.MASTER = PRIOR_CONTEXT_ID AND a.INDX = PRIOR_ITEM_ID  limit 1;              					
					if (val<>'') then set currentpage = val;
					end if;	
				end if;	           
        END IF;
    
    if (usern<>'') THEN   
		/*allow them to login even if expired,  the dashboard gives information that they have expired...*/
		/*if null then select the guest user */
		/*user_guest_name , unknown_user */
        
        select user_pk_field,user_landing_page into o_ref,LANDING_PAGE_R from user_table_name where user_name_field=usern and user_password_field=passw limit 1 ;
        
        if (o_ref is NULL) then 
            select user_pk_field,user_landing_page into o_ref,LANDING_PAGE_R from user_table_name where user_name_field='user_guest_name' limit 1;
         end if;	
         
		IF ( currentpage <> '') THEN set currentpage = concat('//',LANDING_PAGE_R,currentpage);
        ELSE set currentpage = concat('//',LANDING_PAGE_R,'/Index');
		END IF;  
		 
		set PRIOR_CONTEXT_ID = 0;
		set PRIOR_ITEM_ID	 =0;

	END IF; 
		
	INSERT INTO Z$GEN_PK_SEQ (x) VALUES (0);
	SET NEW_CONTEXT_ID = (SELECT LAST_INSERT_ID());
		
    INSERT INTO Z$CONTEXT (PK,            TSTAMP,            OPERATOR_REF, ID,      SESSION_REF,  PAGE,        LINKED_FROM_CID,  LINKED_FROM_INDX) 
	               VALUES (NEW_CONTEXT_ID,CURRENT_TIMESTAMP, o_ref,        SESSION, SESSION,      currentpage, PRIOR_CONTEXT_ID, PRIOR_ITEM_ID   );
         
        
    -- select INFO,PRIOR_CONTEXT_ID,PRIOR_ITEM_ID,currentpage,page_params,NEW_CONTEXT_ID;

END^
SET TERM ; ^



SET TERM ^ ;
CREATE PROCEDURE Z$RUN (
    SESSIONID VARCHAR(40),
    PRIOR_CONTEXT_ID INTEGER,
    PRIOR_ITEM_ID INTEGER,
	PUBLIC_PARAMETERS VARCHAR(1000),
    UPDATES TEXT
    )
	-- select NEW_CONTEXT_ID,info,res,ScriptNamed;
proc_label:  BEGIN
	DECLARE NEW_CONTEXT_ID INTEGER;
	DECLARE info VARCHAR(1000);
	DECLARE res TEXT;
	DECLARE ScriptNamed VARCHAR(250) ;
	
	DECLARE o_ref    varchar(40);
	DECLARE currentpage varchar(100) default '';
	DECLARE current_page_pk  integer;
	DECLARE exec_script    TEXT;
	DECLARE page_params  varchar(1000) default '';  -- retrieved from the database injected into  script at --assign_params 

    call Z$RUN_SUB (SESSIONID,PRIOR_CONTEXT_ID,PRIOR_ITEM_ID,UPDATES,   
					info,ScriptNamed,page_params,NEW_CONTEXT_ID);
					
	if (info='saved') then -- saved without refreshing				 
				  set res= '' ;  
				  set ScriptNamed= '' ;  				   					
				  LEAVE proc_label;
   		   end if;

    /*execute the page or SP*/  

    -- further match language and coy custom files  
    SELECT pk,script into current_page_pk,exec_script FROM Z$SP  where file_name=ScriptNamed limit 1  ;
    if (exec_script is null) then /*back home or direct to an 404 error page ..?*/         
        SELECT pk,script into current_page_pk,exec_script FROM Z$SP where 
                   concat(file_name='//',(SELECT user_landing_page FROM user_table_name WHERE user_pk_field = o_ref),'/404')  limit 1 ;                        
    end if;            
    if (exec_script is null) then /*global 404 error page */
        SELECT pk,script into current_page_pk,exec_script FROM Z$SP q where file_name='//Default/404'  limit 1 ;                        
    end if;       
	 
	-- select 'sc',exec_script;
    if (exec_script is null) then
           set info=concat('No script named : ',COALESCE(ScriptNamed,'')); 
        ELSE            
			-- set @script_exec = replace(exec_script,'-- assign_params',COALESCE(page_params,''));
			set @script_exec = concat(COALESCE(page_params,'') , exec_script);			
			-- select @script_exec; set @script_exec =  exec_script;	
			
			set @IN_SESSIONID=SESSIONID;
			set @IN_NEW_CONTEXT_ID=NEW_CONTEXT_ID;
			set @IN_PRIOR_CONTEXT_ID=PRIOR_CONTEXT_ID;
			set @IN_PRIOR_ITEM_ID=PRIOR_ITEM_ID;

			call Z$EXECUTE_STRINGS(@script_exec);
			set info    = @info_ret;	       
			set res     = @res_ret;	       
        end if;   

	select NEW_CONTEXT_ID,info,res,ScriptNamed;

END^
SET TERM ; ^


SET TERM ^ ;
CREATE FUNCTION Z$ONCE(
	CONTEXT VARCHAR(80),
	INITIAL_TIMES INTEGER,
	PROGRESSIVE_TIMES INTEGER,
	MAX_TIMES INTEGER
    ) RETURNS INTEGER
BEGIN
    DECLARE counter integer default 0; 
    DECLARE DO_SHOW INTEGER;

    -- This is to popup once and/or occationally remind the user of some action 
    -- It also has a "_disable" Context that will disable the reminder 
    set DO_SHOW=0;
    select valu into counter from Z$VARIABLES where Z$VARIABLES.REF=concat(context,'_disable') limit 1;
    if (counter=0) THEN  
            select valu into counter from Z$VARIABLES where Z$VARIABLES.REF=context limit 1;
				INSERT INTO Z$VARIABLES (REF,VALU) VALUES (context,counter+1)
						ON DUPLICATE KEY UPDATE VALU=counter+1;              
            if (counter<Max_times) THEN            
                if (counter<Initial_times) then set DO_SHOW=1; END IF;
                if (MOD(counter,Progressive_times)=0) then set DO_SHOW=1; END IF;
            END IF;            
      END IF;            
      
RETURN(DO_SHOW);	  

END^
SET TERM ; ^



#>









