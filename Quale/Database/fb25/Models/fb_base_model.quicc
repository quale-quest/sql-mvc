
<#:model()

DECLARE EXTERNAL FUNCTION Z$F_F2J
CSTRING(256)
RETURNS CSTRING(256)
ENTRY_POINT 'Z$F_F2J'
MODULE_NAME 'q_UDFLibC';

DECLARE EXTERNAL FUNCTION Z$F_F2SQL
CSTRING(256)
RETURNS CSTRING(256)
ENTRY_POINT 'Z$F_F2SQL'
MODULE_NAME 'q_UDFLibC';

DECLARE EXTERNAL FUNCTION Z$F_J2F
CSTRING(256)
RETURNS CSTRING(256)
ENTRY_POINT 'Z$F_J2F'
MODULE_NAME 'q_UDFLibC';

DECLARE EXTERNAL FUNCTION Z$F_VERSION
RETURNS INTEGER BY VALUE 
ENTRY_POINT 'Z$F_VERSION'
MODULE_NAME 'q_UDFLibC';


/******************** DOMAINS *********************/
 
 
/****************** GENERATORS ********************/


CREATE GENERATOR Z$PK_GEN;
SET GENERATOR Z$PK_GEN TO 1000000100;

CREATE GENERATOR Z$SERVER_NUMBER;
SET GENERATOR Z$SERVER_NUMBER TO 12;


CREATE GENERATOR Z$CONTEXT_SEQ;
SET GENERATOR Z$CONTEXT_SEQ TO 10000;

CREATE GENERATOR Z$SP_INDEX;
SET GENERATOR Z$SP_INDEX TO 1;




/******************** TABLES **********************/


/******************** TRIGGERS ********************/
SET TERM ^ ;
CREATE TRIGGER user_table_name FOR user_table_name ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
if (new.user_pk_field is null) then
    select ref from Z$GEN_PK(1) into new.user_pk_field;

END^
SET TERM ; ^


SET TERM ^ ;
CREATE TRIGGER Z$DICTIONARY_BI FOR Z$DICTIONARY ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
    /* enter trigger code here */ 
if (new.ref is null) then
  begin
    select ref from Z$GEN_PK(1) into new.ref;
  end
END^
SET TERM ; ^

SET TERM ^ ;
CREATE TRIGGER Z$SP_BI FOR Z$SP ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
/*we increment by 1000 as we have sub procedures that are indexed relative to this index*/
    if (new.pk is null) then
        new.pk = gen_id( Z$SP_INDEX, 1000 )+1;
    new.tstamp='now';
END^
SET TERM ; ^

/******************* PROCEDURES ******************/

SET TERM ^ ;
CREATE PROCEDURE Z$GEN_PK (
    STEP INTEGER )
RETURNS (
    REF REFER )
AS
begin  
  Ref =  gen_id(Z$SERVER_NUMBER, 0) || '.' || gen_id(Z$PK_GEN, :step);
  suspend;
END^
SET TERM ; ^






SET TERM ^ ;
/*test code:



SELECT info,currentpage,page_params FROM Z$RUN_SUB ('SESSION1', 999,999,  'u05Guestp11AnyPasswordx00end') p;

SELECT info,currentpage,page_params FROM Z$RUN_SUB ('SESSION1', 999,999,  'u05Guestp041258x00end') p;

SELECT info,currentpage,page_params FROM Z$RUN_SUB ('SESSION1', 999,-1,  'x00end') p;

SELECT info,currentpage,page_params,CIDRETURN,PKREFRETURN FROM Z$RUN_SUB ('SESSION1', 999,999,  'u05Guestp041258x00end') p;
SELECT info,currentpage,page_params,CIDRETURN,PKREFRETURN FROM Z$RUN_SUB ('SESSION1', 0,0,  'u05Guestp041258x00end') p;


*/
CREATE OR ALTER PROCEDURE Z$RUN_SUB (
    SESSION_ID VARCHAR(40),
    CID INTEGER,
    PKREF INTEGER,
    UPDATES BLOB SUB_TYPE 1 
    )
RETURNS (
    INFO VARCHAR(1000),
	currentpage varchar(100) ,	
	page_params varchar(1000),
	CIDRETURN INTEGER,
    PKREFRETURN INTEGER	
    )
AS

DECLARE VARIABLE o_ref    varchar(40);
DECLARE VARIABLE o_session varchar(40);
DECLARE VARIABLE passw    varchar(20) ='';
DECLARE VARIABLE usern    varchar(20) ='';
DECLARE VARIABLE user_landing_page varchar(100) ;
DECLARE VARIABLE table_name varchar(100);
DECLARE VARIABLE target_field_name  varchar(100);
DECLARE VARIABLE target_fields     varchar(100);
DECLARE VARIABLE pk_field_name  varchar(100);
DECLARE VARIABLE pk_val  varchar(100);    
DECLARE VARIABLE current_page_pk  integer;
DECLARE VARIABLE i        integer;
DECLARE VARIABLE update_cid integer;
DECLARE VARIABLE bp        integer;
DECLARE VARIABLE val       varchar(8001);
DECLARE VARIABLE c         integer;
DECLARE VARIABLE len       integer;
DECLARE VARIABLE bt        char(1);
DECLARE VARIABLE pk        integer;
DECLARE VARIABLE script    BLOB SUB_TYPE 1; 
DECLARE VARIABLE Openstr   varchar(1000);
 

BEGIN
	currentpage='';
	page_params='';
	CIDRETURN=CID;

    /*read the Session, CID,PKRef info*/
    --info='mark1';  suspend;
    /*post updates - and check for username passwds*/    
    bp=1;    
    c=0;
    while (c<1000) do 
      BEGIN
          c=c+1;
          bt=SUBSTRING (UPDATES FROM bp FOR 1);   
          /*info=SUBSTRING (UPDATES FROM bp FOR 1); suspend; */
          if (bt>='a') THEN 
              BEGIN /*small case are short fields*/
                  len=cast(SUBSTRING (UPDATES FROM bp+1 FOR 2) as integer);        
                  val=SUBSTRING (UPDATES FROM bp+3 FOR len);        
                  bp=bp+3+len;              
              END
            ELSE
              BEGIN
                  len=cast(SUBSTRING (UPDATES FROM bp+1 FOR 5) as integer);        
                  val=SUBSTRING (UPDATES FROM bp+6 FOR len);        
                  bp=bp+6+len;              
              END
          
            bt=LOWER(bt);
                 if (bt='u') THEN  usern=val ;       
            else if (bt='p') THEN  passw=val ;  
			else if (bt='l') THEN  currentpage=val ;
			else if (bt='t') THEN  Openstr=val ;	-- used as temporary storage 		
            else if (bt='c') THEN  update_cid=val ;  -- used as temporary storage                 
            else if (bt='k') THEN  i=cast(val as integer); /*Key field update - used as temporary storage                 */
            else if (bt='v') THEN /*Key value update - temp cache*/
                     BEGIN
						--softcodec code from the compiler	
						SELECT first 1 COALESCE(b.PAGE_PARAMS,'') FROM Z$PK_CACHE b 
						    WHERE b.MASTER = :update_cid AND b.INDX = :i INTO :script;
						if (script<>'') THEN
                            EXECUTE STATEMENT(script)(:val) INTO :val; 
						
						--val=clean_escape(val);--not needed we are using paramitzed stament
						update Z$PK_CACHE a set a.new_value=:val , a.NEW_VALUE_SET=1
							WHERE a.MASTER = :update_cid AND a.INDX = :i;						
                     END                     
            else if (bt='w') THEN /*Key value update - write updates per record*/
                     BEGIN
                        
						for SELECT b.VALU, b.QUERY, b.PK_FIELD_NAME FROM Z$PK_CACHE b 
							WHERE b.MASTER = :update_cid 
							and b.NEW_VALUE_SET=1
							GROUP by b.MASTER,b.NEW_VALUE_SET,b.VALU,b.QUERY,b.PK_FIELD_NAME
							PLAN (b INDEX (IDX_Z$PK_CACHE2) )
                            into :table_name,:pk_val,:pk_field_name do
                        begin     
                            val = pk_field_name;
                            --info=:pk_val;  suspend;
                            --script = '(SELECT first 1 a.QUERY FROM Z$PK_CACHE a WHERE a.MASTER = '||:update_cid||' and a.QUERY='||:pk_val||')' ;
                            script = '?';
                            for SELECT c.TARGET,c.INDX,c.TARGET_FIELDS,c.TARGET_VALUES FROM Z$PK_CACHE c
                                WHERE c.MASTER = :update_cid 
								and c.NEW_VALUE_SET=1
                                and c.VALU=:table_name and c.QUERY=:pk_val and c.PK_FIELD_NAME=:pk_field_name
                                into :target_field_name,:i,:target_fields,:Openstr do
                                begin                        
                                --info=:val;  suspend;
                                --info=:target_field_name;  suspend;    
                                    val = val||','||:target_field_name||COALESCE(:target_fields,'');
                                    --info=:val;  suspend;    
                                    script = script || ',(select a.new_value from Z$PK_CACHE a where a.MASTER ='||:update_cid||
                                    ' AND a.INDX = '||:i||')'||COALESCE(:Openstr,'');                             
                                end 
                             --update set= tags  
                                
                            
                            script = 'update or insert into '||:table_name||' ('||
                                    val||') values ('||script||') matching ('||pk_field_name||')';

                            
                            --fixup pk for insert methods
                            if ((pk_val is null ) or (OCTET_LENGTH(pk_val)<=1)) then
                                BEGIN
                                   select (ref) from Z$GEN_PK(1) into :pk_val;
                                   --info=:pk_val;  suspend;
                                   --info=:script;  suspend;
                                END
                            --info=:script;  suspend;    
                            EXECUTE STATEMENT(script)(pk_val); 
                            update Z$PK_CACHE a set new_value=null,a.NEW_VALUE_SET=null WHERE a.MASTER = :update_cid;
                            --trigger based validations will emit erors into a log that can be fed back to the user
                            
                        end  
                     END       
            else if (bt='r') THEN /*parameter value from first load Openstr=name*/
                     BEGIN					 					
						UPDATE OR INSERT INTO Z$VARIABLES (REF,VALU) VALUES ('params-'||:SESSION_ID||'-'||:Openstr,:val) matching (REF);
                     END  					 
            else c=1001;
                  
      END

    --info='mark2';  suspend;
    --info=:usern||'&'||:passw||'&'||:currentpage;  suspend;
    /*part of post updates is creating a new session if login info is supplied*/

    if (usern='') THEN    
        BEGIN
		
			if (PKRef=-1) then --save without refreshing
			    begin
				  info='saved';
				  suspend; 					
				  exit;
				end				
		
			if (PKRef<>0) then
			    begin
					SELECT a.target,COALESCE(a.PAGE_PARAMS,'') FROM Z$PK_CACHE a WHERE a.MASTER = :CID AND a.INDX = :PKRef into :currentpage,:page_params;              
					if (currentpage='') then PKRef=0;
				end	
		
		    --refresh page
			if (PKRef=0) then
			    begin
				    SELECT r.LINKED_FROM_CID, r.LINKED_FROM_INDX FROM Z$CONTEXT r where r.pk=:CID and r.id=:SESSION_ID into :CID,:PKRef;
					SELECT a.target,COALESCE(a.PAGE_PARAMS,'')||:page_params FROM Z$PK_CACHE a WHERE a.MASTER = :CID AND a.INDX = :PKRef into :currentpage,:page_params;              				    
				end
				

				
            /*get the new page, and context info */                
            SELECT r.OPERATOR_REF, r.ID FROM Z$CONTEXT r where r.pk=:CID and r.id=:SESSION_ID into :o_ref,:o_session;
            /*todo validate o_session against session*/
                        
            SELECT user_landing_page FROM user_table_name WHERE user_pk_field = :o_ref into :user_landing_page;


            
			
            --if (currentpage='') then usern='SessionExpired';
            --info=:CID||'&'||:PKRef||'& '||'/'||COALESCE(:currentpage,'');  suspend;
            
        END
    
    if (usern<>'') THEN
        begin
          o_ref=NULL;
          /*alow them to login even if expired,  the dashboard gives information that they have expired...*/
          select first 1 user_pk_field,user_landing_page from user_table_name where user_name_field=:usern and user_password_field=:passw into :o_ref,:user_landing_page;
          /*if null then select the nobody user */
          if (o_ref is NULL) then 
              select first 1 user_pk_field,user_landing_page from user_table_name where user_name_field='user_guest_name' into :o_ref,:user_landing_page;
          
          
         
          --info=COALESCE(:o_ref,'NULL')||'&'||COALESCE(:user_landing_page,'NULL')||'&'||COALESCE(:passw,'NULL')||'&';  suspend;
           
		 IF ( currentpage <> '') THEN currentpage = '//'||user_landing_page||currentpage;
         ELSE currentpage = '//'||user_landing_page||'/Index';
		 
         current_page_pk=NULL;
         pk = gen_id( Z$CONTEXT_seq, 1 );          
         INSERT INTO Z$CONTEXT (PK, TSTAMP, OPERATOR_REF, ID) 
                             VALUES (:pk,'now', :o_ref,       :SESSION_ID    );
         
         --this record is so we can save and reload the first page                    
         INSERT INTO Z$PK_CACHE (MASTER, INDX, FIELD_NAME, VALU,TARGET,QUERY, PAGE_PARAMS)
            VALUES (:pk,0,'click','user_table_name', :currentpage , 'user_pk_field='''||replace(:o_ref,'''','''''')||'''','');  
                             
         CID = pk;           
          
        end           
        
	PKREFRETURN=PKREF;
	CIDRETURN=CID;
	suspend;     
          
END^
SET TERM ; ^



SET TERM ^ ;
/*test code:
SELECT NEW_CID,INFO,RES,SCRIPTNAMED FROM Z$RUN_SUP ('SESSION1',  999,999, 'u08USER8002p041257x00end') p;

SELECT NEW_CID,INFO,RES,SCRIPTNAMED FROM Z$RUN_SUP ('SESSION1', 999,999,  'u05Guestp041258x00end') p;

SELECT NEW_CID,INFO,RES,SCRIPTNAMED FROM Z$RUN_SUP ('SESSION1', 999,-1,  'x00end') p;


SELECT NEW_CID,INFO,RES,SCRIPTNAMED FROM Z$RUN ('SESSION1','', 999,999, '','',  'u05Guestp11AnyPasswordx00end') p;
SELECT NEW_CID,SCRIPTNAMED FROM Z$RUN ('SESSION1','', 999,999, '','',  'u05Guestp11AnyPasswordx00end') p;

*/
CREATE OR ALTER PROCEDURE Z$RUN (
    SESSIONID VARCHAR(40),
    ACT VARCHAR(40),
    CID INTEGER,
    PKREF INTEGER,
    VALU VARCHAR(1000),
    PUBLIC_PARAMETERS VARCHAR(1000),
    UPDATES BLOB SUB_TYPE 1 )
RETURNS (
    NEW_CID INTEGER,
    INFO VARCHAR(1000),
    RES BLOB SUB_TYPE 1,
    SCRIPTNAMED VARCHAR(250) 
    )
AS

DECLARE VARIABLE o_ref    varchar(40);
DECLARE VARIABLE current_page_pk  integer;
DECLARE VARIABLE script    BLOB SUB_TYPE 1;
DECLARE VARIABLE Openstr   varchar(1000);
DECLARE VARIABLE page_params  varchar(1000)='';  -- retrieved from the database injected into  script at --assign_params 

BEGIN

	SELECT INFO,currentpage,page_params,CIDRETURN,PKREFRETURN FROM Z$RUN_SUB(:SESSIONID, :CID,:PKREF, :UPDATES) p into :INFO,:ScriptNamed,:page_params,:CID,:PKREF  ;
	if (info='saved') then --saved without refreshing
			    begin				 
				  res= '' ;  
				  SCRIPTNAMED= '' ;  
				  suspend; 					
				  exit;
				end	

      --info=COALESCE(:o_ref,'null')||'&'||COALESCE(:user_landing_page,'null')||'&'||COALESCE(:ScriptNamed,'null')||'&'||COALESCE(:passw,'null')||'&'||COALESCE(current_page_pk,'null');  suspend;          
      /*execute the page or SP*/  
    Openstr = 'EXECUTE BLOCK RETURNS  (cid integer, info varchar(200),res blob SUB_TYPE 1)AS declare pki integer='||CID||';declare pkf integer='||PKRef||';'
         --||COALESCE(:public_parameters,'')
		 --||COALESCE(:page_params,'')
         ||'declare z$sessionid varchar(40)='''||:SESSIONID||''''
         ||';'; 
    
    --info='mark361'; RES=:ScriptNamed;  suspend;    
    --info='mark362'; RES=:page_params;  suspend;    
    --info='mark363'; RES=:PKREF;  suspend;    	
	--info=COALESCE(:page_params,'');  suspend;    
	
    --further match language and coy custom files  
    SELECT first 1 pk,:Openstr||q.SCRIPT FROM Z$SP q where file_name=:ScriptNamed into :current_page_pk,:script ;
    if (script is null) then /*back home or direct to an 404 error page ..?*/   
      begin                 
        SELECT first 1 pk,:Openstr||q.SCRIPT FROM Z$SP q where 
                   file_name='//'||(SELECT user_landing_page FROM user_table_name WHERE user_pk_field = :o_ref)||'/404' into :current_page_pk,:script ;                        
      end             
    if (script is null) then /*global 404 error page */
        SELECT first 1 pk,:Openstr||q.SCRIPT FROM Z$SP q where file_name='//Default/404' into :current_page_pk,:script ;                        
      
      
    /*both inline script and SP will be launched with the same method, to pass the parameters.
       for SP it will just be a small stub of script.
       
       we cannot do "execute procedure :pName ..." --would be nice...and faster
       it may be better to launch the execute procedure from a bunch of if statements..?
      */      
     --info='mark4';  suspend;  
     --ScriptNamed = currentpage;
     if (script is null) then
        begin 
           info='No script named : '||COALESCE(:ScriptNamed,'');  suspend;
        end
        ELSE   
        begin           
		  script = replace(:script,'-- assign_params',COALESCE(:page_params,''));
          --res= :script ;  suspend;
          FOR EXECUTE STATEMENT script INTO :NEW_CID, :info,:res DO suspend;
          WHEN ANY DO
              BEGIN
              info='exception';
              res= sqlcode ||'   SET TERM ^ ;'|| :script ;   
              suspend;              
              END   
              		  
        end    

          
END^
SET TERM ; ^




SET TERM ^ ;
CREATE PROCEDURE Z$ONCE (
    CONTEXT VARCHAR(80),
    INITIAL_TIMES INTEGER,
    PROGRESSIVE_TIMES INTEGER,
    MAX_TIMES INTEGER )
RETURNS (
    DO_SHOW INTEGER )
AS
DECLARE VARIABLE counter integer=0; 
BEGIN
  /* This is to popup once and/or occationally remind the user of some action 
     It also has a "_disable" Context that will disable the reminder
  */ 
  Do_Show=0;
  select first 1 valu from Z$VARIABLES where Z$VARIABLES.REF=:context||'_disable' into :counter;
  if (:counter=0) THEN  
      BEGIN
            select first 1 valu from Z$VARIABLES where Z$VARIABLES.REF=:context into :counter;
            UPDATE OR INSERT INTO Z$VARIABLES (REF,VALU) VALUES (:context,:counter+1) matching (REF);
            if (:counter<:Max_times) THEN
            begin
                if (:counter<:Initial_times) then Do_Show=1;
                if (MOD(:counter,:Progressive_times)=0) then Do_Show=1;
            end            
      END       
    
  suspend;
END^
SET TERM ; ^


#>



